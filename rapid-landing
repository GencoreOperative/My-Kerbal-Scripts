set SHIP:CONTROL:PILOTMAINTHROTTLE to 0.
lock throttle to 0.0.

// Wait for one second in mission time
// Returns 0 when wait is complete, otherwise 1 to indicate waiting.
set TIMER to -1.
declare function timer_wait {
	declare parameter WAIT_SECONDS is 1.
	if (TIMER = -1) {
		set TIMER to MISSIONTIME.
	} else if MISSIONTIME - TIMER > WAIT_SECONDS {
		set TIMER to -1.
		return 0.
	}
	return 1.
}.

// Calculate the current change in vertical delta
// Returns 0 when DVER is calculated, otherwise 1 to indicate waiting.
set DVER to -1.
set PREVIOUS_DVER to -1.
declare function calculate_dver {
	if (PREVIOUS_DVER = -1) {
		set PREVIOUS_DVER to SHIP:VERTICALSPEED.
		lock throttle to 1.0.
	}

	if (timer_wait(1) = 0) {
		lock throttle to 0.0.
		set DVER to PREVIOUS_DVER - SHIP:VERTICALSPEED.
		set PREVIOUS_DVER to -1.
		print "Vertical Delta: " + DVER.
		return 0.
	}
	return 1.
}.

// Pre landing state
gear on.
lights on.
rcs on.
sas off.
panels off.


set TARGET_THROTTLE to 1.0.
set BURN_TIME to -1.
set TIME_TO_BURN to -1.

set run_mode to 0.

until run_mode = 10 {

	// Calcualte the following each iteration
	set TIME_TO_IMPACT to (ALT:RADAR / (SHIP:VERTICALSPEED * -1)).
	if not (DVER = -1) {
		set BURN_TIME to (SHIP:VERTICALSPEED / DVER).
		set TIME_TO_BURN to TIME_TO_IMPACT - BURN_TIME.
	}

	// Run Mode 0: Prepare to calculate
	if run_mode = 0 {
		LOCK STEERING TO SHIP:RETROGRADE.

		if (timer_wait(10) = 0) {
			set run_mode to 1.
		}
	}

	// Run Mode 1: Calculate dVer (the change in vertical velocity)
	if run_mode = 1 {
		if (calculate_dver() = 0) {
			print "Burn Time: " + BURN_TIME.
			print "Time to Burn: " + TIME_TO_BURN.
			set run_mode to 3.
		}
	}

	// Run Mode 3: Calculate Burn Height.
	if run_mode = 3 {
		
		lock throttle to 0.0.
		
		if (TIME_TO_IMPACT < BURN_TIME) {
			set run_mode to 4.
		}
	}

	// Run Mode 4: Commence Rapid Burn.
	if run_mode = 4 {
		
		//if (SHIP:GROUNDSPEED > 1) {
		//	LOCK STEERING TO SHIP:RETROGRADE.
		//} else {
		//	LOCK STEERING TO UP.
		//	set run_mode to 5.
		//}

		if (calculate_dver = 0) {
			set run_mode to 3.
		} else if (ALT:RADAR < 400) {
			set run_mode to 5.
		}



		
		//if (TIMER = -1) {
		//	set PREVIOUS_DVER to SHIP:VERTICALSPEED.
		//	set TIMER to MISSIONTIME.
		//} else {
		//	lock throttle to TARGET_THROTTLE.
		//	set DELTA_TIME to (MISSIONTIME - TIMER).
		//	if (DELTA_TIME > 1) {
		//		set DVER to PREVIOUS_DVER - SHIP:VERTICALSPEED.
		//		set BURN_TIME to (SHIP:VERTICALSPEED / DVER).
		//		set TIME_TO_IMPACT to (ALT:RADAR / (SHIP:VERTICALSPEED * -1)).
		//
		//		if (TIME_TO_IMPACT > BURN_TIME) {
		//			set TARGET_THROTTLE to (TARGET_THROTTLE - 0.05).
		//		}
		//		set TIMER to -1.
		//	}
		//}

		//if (ALT:RADAR < 200) {
		//	set run_mode to 5.
		//}
	}

	// Run Mode 5: Final stabilised burn to touchdown
	if run_mode = 5 {

		LOCK STEERING TO UP.

		set SOFT_SPEED to -5.
		if (ALT:RADAR < 5) {
			set SOFT_SPEED to ALT:RADAR * -1.
		}

		print "R: " + ALT:RADAR + "V: " + (SHIP:VERTICALSPEED * -1).
		if (SHIP:VERTICALSPEED < SOFT_SPEED) {
			set TARGET_THROTTLE to (TARGET_THROTTLE + 0.01).
		} else {
			set TARGET_THROTTLE to (TARGET_THROTTLE - 0.01).
		}

		set HARD_THROTTLE to ALT:RADAR / 1000.
		print "R: " + ALT:RADAR + "V: " + (SHIP:VERTICALSPEED * -1) + "H: " + HARD_THROTTLE + " T: " + TARGET_THROTTLE.
		if (TARGET_THROTTLE > HARD_THROTTLE) {
			set TARGET_THROTTLE to HARD_THROTTLE.
		}

		lock throttle to TARGET_THROTTLE.
		
		//LOCK STEERING TO UP.

		//print "V: " + SHIP:VERTICALSPEED + " TT: " + TARGET_THROTTLE.

		//set SOFT_SPEED to -5.
		//if (ALT:RADAR < 5) {
		//	set SOFT_SPEED to ALT:RADAR * -1.
		//}

		//if (SHIP:VERTICALSPEED < SOFT_SPEED) {
		//	set TARGET_THROTTLE to (TARGET_THROTTLE + 0.01).
		//} else if (SHIP:VERTICALSPEED > SOFT_SPEED) {
		//	set TARGET_THROTTLE to (TARGET_THROTTLE - 0.01).
		//}

		//if (TARGET_THROTTLE > 0.1) {
		//	set TARGET_THROTTLE to 0.1.
		//}

		//if (ALT:RADAR < 2) {
		//	set run_mode to 6.
		//}
	}

	if run_mode = 6 {
		//print "ALL STOP".
		LOCK STEERING TO UP.
		lock THROTTLE to 0.0.
		set SHIP:CONTROL:PILOTMAINTHROTTLE to 0.
		panels on.
		rcs off.
	}
}

//LIST ENGINES IN all_engines.
		//FOR eng IN all_engines {
		//	print "Enging activate " + eng.
		//	eng:activate.
		//}.
