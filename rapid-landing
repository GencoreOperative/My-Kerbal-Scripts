// TODO

// Reading other landing scripts we discover:
// SRFRETROGRADE - Surface Retrograde Vector which elimiates the need for horizontal calculcations.
// Locked variables - we can lock a variable to the result of a calculation which allows us to simplify processing logic
// TIME:SECONDS - Will provide game world time in fractional seconds allowing sub 1-second processing loops as required

set SHIP:CONTROL:PILOTMAINTHROTTLE to 0.
lock throttle to 0.0.

// Wait for one second in mission time
// Returns 0 when wait is complete, otherwise 1 to indicate waiting.
set TIMER to -1.
declare function timer_wait {
	declare parameter WAIT_SECONDS is 1.
	if (TIMER = -1) {
		set TIMER to MISSIONTIME.
	} else if MISSIONTIME - TIMER > WAIT_SECONDS {
		set TIMER to -1.
		return 0.
	}
	return 1.
}.

// Calculate the current change in vertical delta
// Param: Duration of the burn in seconds, default is 1.
// Param: Throttle of the burn between 1.0 and 0.0, default is 1.0.
// Returns 0 when DVER is calculated, otherwise 1 to indicate waiting.
set DVER to -1.
set PREVIOUS_DVER to -1.
declare function calculate_dver {
	declare parameter BURN_TIME is 1, BURN_THROTTLE is 1.0.
	if (PREVIOUS_DVER = -1) {
		set PREVIOUS_DVER to SHIP:VERTICALSPEED.
		lock throttle to BURN_THROTTLE.
	}

	if (timer_wait(BURN_TIME) = 0) {

		lock throttle to 0.0.
		set DVER to (PREVIOUS_DVER - SHIP:VERTICALSPEED) / BURN_TIME.
		set PREVIOUS_DVER to -1.

		calculate_burn(0).

		return 0.
	}
	return 1.
}.

// Calculate and print a number of statistics around the landing predictions.
// Param: 0 to print output, 1 to not print.
declare function calculate_burn {
	declare parameter PRINT_OUTPUT is 1.
	// Calcualte the following each iteration
	set TIME_TO_IMPACT to (ALT:RADAR / (SHIP:VERTICALSPEED * -1)).
	if (PRINT_OUTPUT = 0) { print "Impact (s): " + TIME_TO_IMPACT. }
	if NOT (DVER = -1) {
		if (PRINT_OUTPUT = 0) { print "dVer (ms/s): " + DVER. }
		set BURN_TIME to (SHIP:VERTICALSPEED / DVER).
		if (PRINT_OUTPUT = 0) { print "Estimated Burn (s): " + BURN_TIME. }
		set TIME_TO_BURN to TIME_TO_IMPACT - BURN_TIME.
		if (PRINT_OUTPUT = 0) { print "Start burn in (s): " + TIME_TO_BURN. }
		set BURN_ALTITUDE to (SHIP:VERTICALSPEED * -1 * BURN_TIME).
		if (PRINT_OUTPUT = 0) { print "Burn Altitude (m): " + BURN_ALTITUDE. }
		set COMPASS to 360 - SHIP:BEARING.
		if (PRINT_OUTPUT = 0) { print "Bearing: " + COMPASS. }
		if (PRINT_OUTPUT = 0) { print "". }
	}
}

// Pre landing state
gear on.
lights on.
rcs on.
sas off.
panels off.


set TARGET_THROTTLE to 1.0.
set ANGLE to 45.
set BURN_TIME to -1.
set TIME_TO_BURN to -1.

set run_mode to 0.

until run_mode = 10 {

	// Run Mode 0: Prepare to calculate
	if run_mode = 0 {
		LOCK STEERING TO SHIP:srfretrograde.

		if (timer_wait(10) = 0) {
			set run_mode to 1.
		}
	}

	// Run Mode 1: Calculate dVer (the change in vertical velocity)
	if run_mode = 1 {
		if (calculate_dver() = 0) {
			set run_mode to 3.
		}
	}

	// Run Mode 3: Calculate Burn Height.
	if run_mode = 3 {
		
		lock throttle to 0.0.
		calculate_burn.
		if (TIME_TO_IMPACT <= BURN_TIME) {
			set run_mode to 4.
		}
	}

	// Run Mode 4: Decceleration Burns.
	if run_mode = 4 {

		if (calculate_dver(1, TARGET_THROTTLE) = 0) {
			if (TIME_TO_IMPACT > BURN_TIME) {
				set TARGET_THROTTLE to TARGET_THROTTLE - 0.05.
			}

			print "G: " + SHIP:GROUNDSPEED + " V: " + (-1 * SHIP:VERTICALSPEED).
			if (SHIP:GROUNDSPEED > 50) {
				set ANGLE to 45.
			} else if (SHIP:GROUNDSPEED > 10) {
				set ANGLE to 67.
			} else {
				set ANGLE to 90.
			}
			lock STEERING to HEADING(COMPASS, ANGLE).
		}


		if (ALT:RADAR < 300) {
			set run_mode to 15.
		}
		//if (ALT:RADAR < 1000) {
		//	set run_mode to 15.
		//}
	}

	if run_mode = 15 {
		if (SHIP:VERTICALSPEED < -10) {
			set TARGET_THROTTLE to TARGET_THROTTLE + 0.01.
			print "Increment " + TARGET_THROTTLE.
		} else if (SHIP:VERTICALSPEED > -8) {
			set TARGET_THROTTLE to TARGET_THROTTLE - 0.01.
			print "Decrement " + TARGET_THROTTLE.
		}
		lock throttle to TARGET_THROTTLE.
		print "Radar: " + ALT:RADAR.
		if (ALT:RADAR < 5) {
			set run_mode to 16.
		}
	}

	if run_mode = 16 {
		lock throttle to 0.0.
		if (timer_wait(1) = 0) {
			if (SHIP:VERTICALSPEED < 1) {
				if (SHIP:VERTICALSPEED > -1) {
					set run_mode to 6.
				}
			}
		}
	}

	if run_mode = 6 {
		LOCK STEERING TO UP.
		lock THROTTLE to 0.0.
		set SHIP:CONTROL:PILOTMAINTHROTTLE to 0.
		panels on.
		rcs off.
	}
}